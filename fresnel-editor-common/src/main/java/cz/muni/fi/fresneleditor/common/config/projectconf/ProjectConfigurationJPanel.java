/*
 * Fresnel Editor
 * Faculty of Informatics, Masaryk University, Brno
 */

package cz.muni.fi.fresneleditor.common.config.projectconf;

import java.io.IOException;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

import cz.muni.fi.fresneleditor.common.AppEventsManager;
import cz.muni.fi.fresneleditor.common.ContextHolder;
import cz.muni.fi.fresneleditor.common.FresnelEditorConstants;
import cz.muni.fi.fresneleditor.common.config.ProjectConfiguration;
import cz.muni.fi.fresneleditor.common.events.IRepositoriesChangedListener;
import cz.muni.fi.fresneleditor.common.events.RepositoriesChangedEvent;
import cz.muni.fi.fresneleditor.common.guisupport.ExtendedDefaultComboBM;
import cz.muni.fi.fresneleditor.common.utils.GuiUtils;

/**
 * 
 * @author Igor Zemsky (zemsky@mail.muni.cz)
 */
public class ProjectConfigurationJPanel extends javax.swing.JPanel implements
		IRepositoriesChangedListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static final Logger LOG = LoggerFactory
			.getLogger(ProjectConfigurationJPanel.class);

	/**
	 * True if we are creating new project configuration. False if we are
	 * editing existing configuration.
	 */
	private final boolean createNew;

	/**
	 * Holds the edited configuration.
	 */
	protected ProjectConfiguration configuration;

	/**
	 * Holds the original state of the edited configuration. Can be null if we
	 * are creating new configuration
	 */
	private final ProjectConfiguration originalConfiguration;

	/**
	 * Path to currently opened project - null if no project is opened.
	 */
	private String projectConfigurationFileURL;

	/**
	 * Dummy constructor for NetBeans. DO NOT USE THIS CONSTRUCTOR!
	 */
	public ProjectConfigurationJPanel() {
		super();
		initComponents();
		createNew = true; // does not matter
		originalConfiguration = null;
		// this(null);
	}

	/**
	 * Component for editing/creating new project.
	 * 
	 * @param configuration
	 *            the configuration to edit. <br>
	 *            Can be null - in that case new project is created
	 * @param closeButtonAL
	 *            action listener that is executed after user presses the close
	 *            button <br>
	 *            can be null - in that case nothing happens when user pressed
	 *            the close button
	 */
	public ProjectConfigurationJPanel(ProjectConfiguration configuration,
			String projectConfigurationFileURL) {

		this.configuration = configuration;
		this.createNew = (configuration == null);
		if (createNew) {
			this.originalConfiguration = null;
		} else {
			this.originalConfiguration = configuration;
		}
		initComponents();

//                projectUriText.setEnabled(createNew);
//		projectNameText.setEnabled(createNew);
		projectFileText.setEnabled(createNew);
		if (!createNew) {
			browseProjectFileBtn.setEnabled(createNew);
			browseProjectFileBtn
					.setForeground(FresnelEditorConstants.COLOR_DISABLED);
		}

		// set default values
		if (configuration != null) {
                        projectUriText.setText(configuration.getUri());
			projectFileText.setText(projectConfigurationFileURL);
			projectNameText.setText(configuration.getName());
			projectDescriptionTextArea.setText(configuration.getDescription());
		}

		AppEventsManager.getInstance().addFresnelAppEventListener(
				IRepositoriesChangedListener.class, this);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basicProjectInfoPanel = new javax.swing.JPanel();
        projectDescriptionScrollPane = new javax.swing.JScrollPane();
        projectDescriptionTextArea = new javax.swing.JTextArea();
        projectDescriptionLbl = new javax.swing.JLabel();
        projectNameText = new javax.swing.JTextField();
        projectNameLbl = new javax.swing.JLabel();
        projectFileText = new javax.swing.JTextField();
        projectFileLbl = new javax.swing.JLabel();
        browseProjectFileBtn = new javax.swing.JButton();
        projectUrlLbl = new javax.swing.JLabel();
        projectUriText = new javax.swing.JTextField();
        note = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ProjectConfigurationJPanel.class);
        basicProjectInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("basicProjectInfoPanel.border.title"))); // NOI18N
        basicProjectInfoPanel.setName("basicProjectInfoPanel"); // NOI18N

        projectDescriptionScrollPane.setName("projectDescriptionScrollPane"); // NOI18N

        projectDescriptionTextArea.setColumns(20);
        projectDescriptionTextArea.setFont(resourceMap.getFont("projectDescriptionTextArea.font")); // NOI18N
        projectDescriptionTextArea.setRows(5);
        projectDescriptionTextArea.setName("projectDescriptionTextArea"); // NOI18N
        projectDescriptionScrollPane.setViewportView(projectDescriptionTextArea);

        projectDescriptionLbl.setText(resourceMap.getString("projectDescriptionLbl.text")); // NOI18N
        projectDescriptionLbl.setName("projectDescriptionLbl"); // NOI18N

        projectNameText.setText(resourceMap.getString("projectNameText.text")); // NOI18N
        projectNameText.setDisabledTextColor(resourceMap.getColor("projectNameText.disabledTextColor")); // NOI18N
        projectNameText.setName("projectNameText"); // NOI18N

        projectNameLbl.setFont(resourceMap.getFont("projectNameLbl.font")); // NOI18N
        projectNameLbl.setText(resourceMap.getString("projectNameLbl.text")); // NOI18N
        projectNameLbl.setName("projectNameLbl"); // NOI18N

        projectFileText.setDisabledTextColor(resourceMap.getColor("projectFileText.disabledTextColor")); // NOI18N
        projectFileText.setName("projectFileText"); // NOI18N

        projectFileLbl.setText(resourceMap.getString("projectFileLbl.text")); // NOI18N
        projectFileLbl.setName("projectFileLbl"); // NOI18N

        browseProjectFileBtn.setText(resourceMap.getString("browseProjectFileBtn.text")); // NOI18N
        browseProjectFileBtn.setName("browseProjectFileBtn"); // NOI18N
        browseProjectFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseProjectFileBtnActionPerformed(evt);
            }
        });

        projectUrlLbl.setText(resourceMap.getString("projectUrlLbl.text")); // NOI18N
        projectUrlLbl.setName("projectUrlLbl"); // NOI18N

        projectUriText.setText(resourceMap.getString("projectUriText.text")); // NOI18N
        projectUriText.setName("projectUriText"); // NOI18N

        note.setText(resourceMap.getString("note.text")); // NOI18N
        note.setName("note"); // NOI18N

        javax.swing.GroupLayout basicProjectInfoPanelLayout = new javax.swing.GroupLayout(basicProjectInfoPanel);
        basicProjectInfoPanel.setLayout(basicProjectInfoPanelLayout);
        basicProjectInfoPanelLayout.setHorizontalGroup(
            basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicProjectInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(basicProjectInfoPanelLayout.createSequentialGroup()
                        .addGroup(basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameLbl)
                            .addComponent(projectFileLbl)
                            .addComponent(projectDescriptionLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(basicProjectInfoPanelLayout.createSequentialGroup()
                                .addGroup(basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(projectFileText)
                                    .addComponent(projectNameText)
                                    .addComponent(note, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(projectUriText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(browseProjectFileBtn))
                            .addComponent(projectDescriptionScrollPane)))
                    .addComponent(projectUrlLbl))
                .addContainerGap())
        );
        basicProjectInfoPanelLayout.setVerticalGroup(
            basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicProjectInfoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(note)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectUrlLbl)
                    .addComponent(projectUriText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLbl)
                    .addComponent(projectNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectFileLbl)
                    .addComponent(projectFileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseProjectFileBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicProjectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectDescriptionLbl)
                    .addComponent(projectDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basicProjectInfoPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basicProjectInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

	private void browseProjectFileBtnActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_browseProjectFileBtnActionPerformed

		JFileChooser chooser = new JFileChooser();

                FileFilter filter = new FileNameExtensionFilter(
                        "Fresnel Editor projects (*.n3)", "n3");
                chooser.setFileFilter(filter);

		int returnVal = chooser.showSaveDialog(GuiUtils.getTopComponent());
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			try {
				String filePath = chooser.getSelectedFile().getCanonicalPath();
				String checkedFilePath = checkFilePath(filePath);
				projectFileText.setText(checkedFilePath);
			} catch (IOException ex) {
				LOG.error("Error when returning from file chooser dialog!");
				return;
				// FIXME
			}
		}
	}// GEN-LAST:event_browseProjectFileBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel basicProjectInfoPanel;
    private javax.swing.JButton browseProjectFileBtn;
    private javax.swing.JLabel note;
    private javax.swing.JLabel projectDescriptionLbl;
    private javax.swing.JScrollPane projectDescriptionScrollPane;
    private javax.swing.JTextArea projectDescriptionTextArea;
    private javax.swing.JLabel projectFileLbl;
    private javax.swing.JTextField projectFileText;
    private javax.swing.JLabel projectNameLbl;
    private javax.swing.JTextField projectNameText;
    private javax.swing.JTextField projectUriText;
    private javax.swing.JLabel projectUrlLbl;
    // End of variables declaration//GEN-END:variables

	/**
	 * Returns true if the project configuration in this pane belongs to
	 * currently opened project.
	 */
	public boolean isEditingOpenedProjectConfiguration() {
		String openProjectName = ContextHolder.getInstance()
				.getOpenProjectName();
		return openProjectName != null
				&& openProjectName.equals(originalConfiguration.getName());
	}

	/**
	 * Validates and saves the project configuration. Creates new project
	 * configuration if necessary.
	 * 
	 * Returns true if the configuration was saved successfully. Otherwise
	 * returns false.
	 */
	boolean saveProjectConfiguration() {

		if (!validateConfiguration()) {
			return false;
		}

		if (createNew) {
			configuration = new ProjectConfiguration();
		}

                configuration.setUri("http://localproject/" + projectUriText.getText());
		configuration.setName(projectNameText.getText());
		configuration.setDescription(projectDescriptionTextArea.getText());
		this.setProjectConfigurationFileURL(projectFileText.getText());
		ContextHolder.getInstance().setProjectConfiguration(configuration);
		
		return true;
	}

	// private void displayWarning(Throwable e) {
	// new MessageDialog(this, "Error configuration during update",
	// "An error occured during updating configuration:\n" +
	// e.getMessage()).setVisible(true);
	// }

	/**
	 * Returns true if a valid project configuration can be created from the
	 * current state of the form.
	 * 
	 * @return
	 */
	private boolean validateConfiguration() {
                if(!StringUtils.hasText(projectUriText.getText())){
                    return false;                   
                }
                if(projectUriText.getText().indexOf("/") > 0 || projectUriText.getText().indexOf(" ") > 0){
                    return false;
                }
		if (!StringUtils.hasText(projectNameText.getText())) {
			return false;
		}
		if (!StringUtils.hasText(projectFileText.getText())) {
			return false;
		}
		return true;
	}

	public ProjectConfiguration getConfiguration() {
		return configuration;
	}

	private String checkFilePath(String filePath) {
		if (filePath.endsWith(".n3")) {
			return filePath;
		} else {
			return filePath.concat(".n3");
		}
	}

	@Override
	public void repositoriesChanged(RepositoriesChangedEvent evt) {
            // TODO: remove this
	}

	/**
	 * @return the projectConfigurationFileURL
	 */
	public String getProjectConfigurationFileURL() {
		return projectConfigurationFileURL;
	}

	/**
	 * @param projectConfigurationFileURL
	 *            the projectConfigurationFileURL to set
	 */
	public void setProjectConfigurationFileURL(
			String projectConfigurationFileURL) {
		this.projectConfigurationFileURL = projectConfigurationFileURL;
	}
}
