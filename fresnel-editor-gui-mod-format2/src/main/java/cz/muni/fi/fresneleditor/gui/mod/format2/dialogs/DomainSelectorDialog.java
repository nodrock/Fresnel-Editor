/*
 * Fresnel Editor
 */

package cz.muni.fi.fresneleditor.gui.mod.format2.dialogs;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JRadioButton;
import javax.swing.SwingUtilities;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cz.muni.fi.fresneleditor.common.ContextHolder;
import cz.muni.fi.fresneleditor.common.data.DomainType;
import cz.muni.fi.fresneleditor.common.data.SelectorObject;
import cz.muni.fi.fresneleditor.common.data.SelectorType;
import cz.muni.fi.fresneleditor.common.guisupport.MessageDialog;
import cz.muni.fi.fresneleditor.common.reposconf.QueryRepositoryJDialog;
import cz.muni.fi.fresneleditor.common.utils.FresnelUtils;
import cz.muni.fi.fresneleditor.common.utils.GuiUtils;
import cz.muni.fi.fresneleditor.gui.mod.format2.data.DomainSelectorGuiWrapper;

/**
 * Dialog allowing editing of domain selector.
 * 
 * @author Miroslav Warchil
 * @version 21.3.2009
 */
public class DomainSelectorDialog extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Logger LOG = LoggerFactory
			.getLogger(DomainSelectorDialog.class);
	// private static final ResourceBundle bundle = java.util.ResourceBundle
	// .getBundle("cz/muni/fi/fresneleditor/gui/mod/format2/resource-bundle-format");

	private DomainSelectorGuiWrapper domainSelector = null;

	private SelectorObject selectorObject = null;

	/**
	 * Creates new form DomainSelectorDialog.
	 */
	public DomainSelectorDialog(java.awt.Frame parent, boolean modal,
			DomainSelectorGuiWrapper domainSelector) {
		super(parent, modal);
		initComponents();
		// Load domain selector into dialog components
		this.domainSelector = domainSelector;
		loadDomainSelector();
	}

	/**
	 * Fills dialog components with information about given domain selector.
	 */
	private void loadDomainSelector() {

		JRadioButton selectedDomainTypeRadio = null;

		switch (domainSelector.getDomainType()) {
		case CLASS:
			selectedDomainTypeRadio = classDomainRadio;
			break;
		case INSTANCE:
			selectedDomainTypeRadio = instanceDomainRadio;
			break;
		case PROPERTY:
			selectedDomainTypeRadio = propertyDomainRadio;
			break;
		default:
			LOG.error("Invalid domain type of given domain selector!");
			throw new IndexOutOfBoundsException("domainType");
		}

		JRadioButton selectedSelectorTypeRadio = null;

		switch (domainSelector.getSelectorType()) {
		case SIMPLE:
			selectedSelectorTypeRadio = simpleSelectorRadio;
			break;
		case FSL:
			selectedSelectorTypeRadio = fslQueryRadio;
			break;
		case SPARQL:
			selectedSelectorTypeRadio = sparqlQueryRadio;
			break;
		default:
			LOG.error("Invalid selector type of given domain selector!");
			throw new IndexOutOfBoundsException("selectorType");
		}

		// New final variables are needed for access in invokeLater() method.
		final JRadioButton selectedDomainTypeRadioFinal = selectedDomainTypeRadio;
		final JRadioButton selectedSelectorTypeRadioFinal = selectedSelectorTypeRadio;

		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				selectedDomainTypeRadioFinal.setSelected(true);
				selectedSelectorTypeRadioFinal.setSelected(true);
				selectorStringText.setText(domainSelector.getSelectorString());
			}
		});
	}

	/**
	 * TODO: Maybe empty
	 */
	private void saveDomainSelector() {

		if (propertyDomainRadio.isSelected()) {
			domainSelector.setDomainType(DomainType.PROPERTY);
		} else if (instanceDomainRadio.isSelected()) {
			domainSelector.setDomainType(DomainType.INSTANCE);
		} else if (classDomainRadio.isSelected()) {
			domainSelector.setDomainType(DomainType.CLASS);
		} else {
			LOG.warn("None of domain type radio buttons is selected!");
		}

		if (simpleSelectorRadio.isSelected()) {
			domainSelector.setSelectorType(SelectorType.SIMPLE);
		} else if (fslQueryRadio.isSelected()) {
			domainSelector.setSelectorType(SelectorType.FSL);
		} else if (sparqlQueryRadio.isSelected()) {
			domainSelector.setSelectorType(SelectorType.SPARQL);
		} else {
			LOG.warn("None of selector type radio buttons is selected!");
		}

		if (SelectorType.SIMPLE.equals(domainSelector.getSelectorType())
				&& (DomainType.CLASS.equals(domainSelector.getDomainType()) || (DomainType.PROPERTY
						.equals(domainSelector.getDomainType())))) {
			domainSelector.setSelectorString(FresnelUtils
					.replacePrefix(selectorStringText.getText()));
		} else {
			domainSelector.setSelectorString(selectorStringText.getText());
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		domainTypeBtnGroup = new javax.swing.ButtonGroup();
		selectorTypeBtnGroup = new javax.swing.ButtonGroup();
		propertyDomainRadio = new javax.swing.JRadioButton();
		instanceDomainRadio = new javax.swing.JRadioButton();
		classDomainRadio = new javax.swing.JRadioButton();
		domainTypeLabel = new javax.swing.JLabel();
		selectorTypeLabel = new javax.swing.JLabel();
		fslQueryRadio = new javax.swing.JRadioButton();
		sparqlQueryRadio = new javax.swing.JRadioButton();
		simpleSelectorRadio = new javax.swing.JRadioButton();
		selectorStringLabel = new javax.swing.JLabel();
		saveBtn = new javax.swing.JButton();
		cancelBtn = new javax.swing.JButton();
		selectorStringScrollPane = new javax.swing.JScrollPane();
		selectorStringText = new javax.swing.JTextArea();
		btnQueryBrowser = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Format domain editor");
		setModal(true);

		domainTypeBtnGroup.add(propertyDomainRadio);
		propertyDomainRadio.setSelected(true);
		propertyDomainRadio.setText("property domain");
		propertyDomainRadio.setName("propertyDomainRadio"); // NOI18N

		domainTypeBtnGroup.add(instanceDomainRadio);
		instanceDomainRadio.setText("instance domain");
		instanceDomainRadio.setName("instanceDomainRadio"); // NOI18N

		domainTypeBtnGroup.add(classDomainRadio);
		classDomainRadio.setText("class domain");
		classDomainRadio.setName("classDomainRadio"); // NOI18N
		classDomainRadio
				.addChangeListener(new javax.swing.event.ChangeListener() {
					public void stateChanged(javax.swing.event.ChangeEvent evt) {
						classDomainRadioStateChanged(evt);
					}
				});

		domainTypeLabel.setText("Domain type:");
		domainTypeLabel.setName("domainTypeLabel"); // NOI18N

		selectorTypeLabel.setText("Selector type:");
		selectorTypeLabel.setName("selectorTypeLabel"); // NOI18N

		selectorTypeBtnGroup.add(fslQueryRadio);
		fslQueryRadio.setText("FSL query");
		fslQueryRadio.setName("fslQueryRadio"); // NOI18N

		selectorTypeBtnGroup.add(sparqlQueryRadio);
		sparqlQueryRadio.setText("SPARQL query");
		sparqlQueryRadio.setName("sparqlQueryRadio"); // NOI18N

		selectorTypeBtnGroup.add(simpleSelectorRadio);
		simpleSelectorRadio.setSelected(true);
		simpleSelectorRadio.setText("Simple selector");
		simpleSelectorRadio.setName("simpleSelectorRadio"); // NOI18N

		selectorStringLabel.setText("Selector string:");
		selectorStringLabel.setName("selectorStringLabel"); // NOI18N

		saveBtn.setText("Save");
		saveBtn.setName("saveBtn"); // NOI18N
		saveBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveBtnActionPerformed(evt);
			}
		});

		cancelBtn.setText("Cancel");
		cancelBtn.setName("cancelBtn"); // NOI18N
		cancelBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelBtnActionPerformed(evt);
			}
		});

		selectorStringScrollPane.setName("selectorStringScrollPane"); // NOI18N

		selectorStringText.setColumns(20);
		selectorStringText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
		selectorStringText.setRows(5);
		selectorStringText.setName("selectorStringText"); // NOI18N
		selectorStringScrollPane.setViewportView(selectorStringText);

		btnQueryBrowser.setText("Query Browser...");
		btnQueryBrowser.setName("btnQueryBrowser"); // NOI18N
		btnQueryBrowser.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnQueryBrowserActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.TRAILING)
												.addGroup(
														layout.createSequentialGroup()
																.addContainerGap()
																.addComponent(
																		selectorStringScrollPane,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		345,
																		Short.MAX_VALUE))
												.addGroup(
														javax.swing.GroupLayout.Alignment.LEADING,
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addContainerGap()
																								.addComponent(
																										domainTypeLabel))
																				.addGroup(
																						layout.createSequentialGroup()
																								.addGap(22,
																										22,
																										22)
																								.addGroup(
																										layout.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.LEADING)
																												.addComponent(
																														instanceDomainRadio)
																												.addComponent(
																														propertyDomainRadio)
																												.addComponent(
																														classDomainRadio))))
																.addGap(43, 43,
																		43)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						selectorTypeLabel)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addGap(10,
																										10,
																										10)
																								.addGroup(
																										layout.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.LEADING)
																												.addComponent(
																														fslQueryRadio)
																												.addComponent(
																														sparqlQueryRadio)
																												.addComponent(
																														simpleSelectorRadio)))))
												.addGroup(
														javax.swing.GroupLayout.Alignment.LEADING,
														layout.createSequentialGroup()
																.addContainerGap()
																.addComponent(
																		selectorStringLabel))
												.addGroup(
														javax.swing.GroupLayout.Alignment.LEADING,
														layout.createSequentialGroup()
																.addContainerGap()
																.addComponent(
																		btnQueryBrowser)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		88,
																		Short.MAX_VALUE)
																.addComponent(
																		cancelBtn)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		saveBtn,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		69,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(17, 17, 17)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(domainTypeLabel)
												.addComponent(selectorTypeLabel))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														propertyDomainRadio)
												.addComponent(
														simpleSelectorRadio))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														instanceDomainRadio)
												.addComponent(fslQueryRadio))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(classDomainRadio)
												.addComponent(sparqlQueryRadio))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(selectorStringLabel)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(selectorStringScrollPane,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										142, Short.MAX_VALUE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(btnQueryBrowser)
												.addComponent(saveBtn)
												.addComponent(cancelBtn))
								.addContainerGap()));

		pack();
	}// </editor-fold>                        

	private void classDomainRadioStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_classDomainRadioStateChanged
		if (classDomainRadio.isSelected()) {
			simpleSelectorRadio.setSelected(true);
			fslQueryRadio.setEnabled(false);
			sparqlQueryRadio.setEnabled(false);
		} else {
			fslQueryRadio.setEnabled(true);
			sparqlQueryRadio.setEnabled(true);
		}
	}// GEN-LAST:event_classDomainRadioStateChanged

	private void btnQueryBrowserActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnQueryBrowserActionPerformed
		selectorObject = new SelectorObject(null, selectorStringText.getText());

		if (simpleSelectorRadio.isSelected()) {
			selectorObject.setSelectorType(SelectorType.SIMPLE);
		} else if (fslQueryRadio.isSelected()) {
			selectorObject.setSelectorType(SelectorType.FSL);
		} else if (sparqlQueryRadio.isSelected()) {
			selectorObject.setSelectorType(SelectorType.SPARQL);
		} else {
			selectorObject.setSelectorType(SelectorType.SIMPLE);
		}

		QueryRepositoryJDialog queryRepository = new QueryRepositoryJDialog(
				GuiUtils.getOwnerFrame(this), true, ContextHolder.getInstance()
						.getDataRepositoryDao(), this.selectorObject);

		queryRepository.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosed(WindowEvent ev) {
				// Take selector returned from domain selector dialog and add it
				// to table model
				LOG.info("Merging changes of domain selector: "
						+ selectorObject.toString());
				SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						if (selectorObject.isUpdated()) {
							switch (selectorObject.getSelectorType()) {
							case SIMPLE:
								selectorStringText.setText(selectorObject
										.getQuery());
								simpleSelectorRadio.setSelected(true);
								break;
							case FSL:
								if (!classDomainRadio.isSelected()) {
									selectorStringText.setText(selectorObject
											.getQuery());
									fslQueryRadio.setSelected(true);
								}
								break;
							case SPARQL:
								if (!classDomainRadio.isSelected()) {
									selectorStringText.setText(selectorObject
											.getQuery());
									sparqlQueryRadio.setSelected(true);
								}
								break;
							}
						}
					}
				});
			}
		});

		queryRepository.setVisible(true);
		GuiUtils.centerOnScreen(queryRepository);
	}// GEN-LAST:event_btnQueryBrowserActionPerformed

	private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelBtnActionPerformed
		domainSelector.setUpdated(false);
		this.dispose();
	}// GEN-LAST:event_cancelBtnActionPerformed

	private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveBtnActionPerformed
		if (validateForm()) {
			this.saveDomainSelector();
			domainSelector.setUpdated(true);
			this.dispose();
		}
	}// GEN-LAST:event_saveBtnActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnQueryBrowser;
	private javax.swing.JButton cancelBtn;
	private javax.swing.JRadioButton classDomainRadio;
	private javax.swing.ButtonGroup domainTypeBtnGroup;
	private javax.swing.JLabel domainTypeLabel;
	private javax.swing.JRadioButton fslQueryRadio;
	private javax.swing.JRadioButton instanceDomainRadio;
	private javax.swing.JRadioButton propertyDomainRadio;
	private javax.swing.JButton saveBtn;
	private javax.swing.JLabel selectorStringLabel;
	private javax.swing.JScrollPane selectorStringScrollPane;
	private javax.swing.JTextArea selectorStringText;
	private javax.swing.ButtonGroup selectorTypeBtnGroup;
	private javax.swing.JLabel selectorTypeLabel;
	private javax.swing.JRadioButton simpleSelectorRadio;
	private javax.swing.JRadioButton sparqlQueryRadio;

	// End of variables declaration//GEN-END:variables

	private boolean validateForm() {

		// 1. For PROPERTY-BASIC: String->URI (target must be property URI ->
		// validation to URI is
		// sufficient)
		// 2. For PROPERTY-FSL: String->valid FSL path (target is probably
		// undetectable)
		// 3. For PROPERTY-SPARQL: String->valid SPARQL query (target is
		// probably unreachable)

		String selectorString = selectorStringText.getText().trim();

		if (simpleSelectorRadio.isSelected()) {
                    //TODO: nodrock fix this
			String validateMessage = null;
//                                FresnelUtils.validateResourceUri(
//					selectorString, ContextHolder.getInstance()
//							.getFresnelRepositoryDao());
			if (validateMessage != null) {
				new MessageDialog(GuiUtils.getOwnerFrame(this),
						"Invalid selector string", "Selector string '"
								+ selectorString + "' is not valid:<br>"
								+ validateMessage).setVisible(true);
				return false;
			}
		} else if (fslQueryRadio.isSelected()) {
			// TODO
		} else if (sparqlQueryRadio.isSelected()) {
			// TODO
		} else {
			LOG.warn("None of selector type radio buttons is selected!");
		}

		return true;
	}
}
