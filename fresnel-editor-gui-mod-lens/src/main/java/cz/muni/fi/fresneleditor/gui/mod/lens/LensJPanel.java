/*
 * Fresnel Editor
 */

package cz.muni.fi.fresneleditor.gui.mod.lens;

import cz.muni.fi.fresneleditor.gui.mod.lens.treemodel.LensItemNode;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;

import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.openrdf.model.Literal;
import org.openrdf.model.URI;
import org.openrdf.model.impl.LiteralImpl;
import org.openrdf.model.impl.URIImpl;
import org.springframework.util.StringUtils;

import com.google.common.base.Function;
import com.google.common.collect.Lists;

import cz.muni.fi.fresneleditor.common.AppEventsManager;
import cz.muni.fi.fresneleditor.common.ContextHolder;
import cz.muni.fi.fresneleditor.common.ITabComponent;
import cz.muni.fi.fresneleditor.common.guisupport.IContextMenu;
import cz.muni.fi.fresneleditor.common.guisupport.IEditable;
import cz.muni.fi.fresneleditor.common.guisupport.MessageDialog;
import cz.muni.fi.fresneleditor.common.guisupport.dialogs.PreviewDialog;
import cz.muni.fi.fresneleditor.common.utils.FresnelUtils;
import cz.muni.fi.fresneleditor.common.utils.GuiUtils;
import cz.muni.fi.fresneleditor.gui.mod.lens.components.AddHidePropertyDialog;
import cz.muni.fi.fresneleditor.gui.mod.lens.components.DomainSelectorDialog;
import cz.muni.fi.fresneleditor.gui.mod.lens.components.EditShowPropertyJDialog;
import cz.muni.fi.fresneleditor.gui.mod.lens.components.LensPreviewDialog;
import cz.muni.fi.fresneleditor.gui.mod.lens.components.SelectLensPropertyJPanel;
import cz.muni.fi.fresneleditor.gui.mod.lens.model.LensSelector;
import cz.muni.fi.fresneleditor.gui.mod.lens.model.PurposeDisplayFormat;
import cz.muni.fi.fresneleditor.gui.mod.lens.utils.LensModelManager;
import fr.inria.jfresnel.Group;
import fr.inria.jfresnel.Lens;
import fr.inria.jfresnel.sesame.SesameLens;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import fr.inria.jfresnel.lenses.LensPurposeType;

/**
 * Main JPanel providing Fresnel Lens functionality to the user interface
 * 
 * @author Igor Zemsky (zemsky@mail.muni.cz)
 */
public class LensJPanel extends javax.swing.JPanel implements
		ITabComponent<Lens>, IEditable {

	private JScrollPane representingScrollPane;
	private final LensItemNode lensItemNode;
	private Lens lens;
	private final LensModel initialLensModel;
	private boolean createNew;
	private LensSelector lensSelector;

	/**
	 * Creates new pane for editing/creation of new lens.
	 * 
	 * @param lensUri
	 *            if null than new lens can be created via this pane <br>
	 *            if not null than the specified lens can be edited
	 * @param lensItemNode
	 *            the node in the project tree that is represented by this pane
	 *            component
	 */
	public LensJPanel(Lens lens, LensItemNode lensItemNode) {

		initComponents();
                initLensPurposeCombo();
		this.lensItemNode = lensItemNode;
		this.lens = lens;
		createNew = lens == null;

		if (createNew) {
			this.initialLensModel = null;
		} else {
			this.initialLensModel = new LensModel(lens);
		}

		loadModel(initialLensModel);
	}
        
        private void initLensPurposeCombo(){
            PurposeDisplayFormat[] purposes = {
                            new PurposeDisplayFormat(LensPurposeType.NOT_SPECIFIED,
                                            "Default (not specified)"),
                            new PurposeDisplayFormat(LensPurposeType.DEFAULT),
                            new PurposeDisplayFormat(LensPurposeType.LABEL) };
            ComboBoxModel purposeDisplayFormatModel = new DefaultComboBoxModel(purposes);
            lensPurposeCombo.setModel(purposeDisplayFormatModel);
        }

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		lensNameLbl = new javax.swing.JLabel();
		domainJPanel = new javax.swing.JPanel();
		selectorDomainLbl = new javax.swing.JLabel();
		selectorTypeLbl = new javax.swing.JLabel();
		selectorValueLbl = new javax.swing.JLabel();
		selectorDomainValueLbl = new javax.swing.JLabel();
		selectorTypeValueLbl = new javax.swing.JLabel();
		selectorValueValueLbl = new javax.swing.JLabel();
		editSelectorBtn = new javax.swing.JButton();
		commentJPanel = new javax.swing.JPanel();
		commentJScrollPane = new javax.swing.JScrollPane();
		commentTextArea = new javax.swing.JTextArea();
		purposeJPanel = new javax.swing.JPanel();
		lensPurposeCombo = new javax.swing.JComboBox();
		groupsJPanel = new javax.swing.JPanel();
		groupsJScrollPane = new javax.swing.JScrollPane();
		associatedGroupsList = new cz.muni.fi.fresneleditor.common.guisupport.components.UrisJList();
		hidePropertiesJPanel = new javax.swing.JPanel();
		addHidePropertyBtn = new javax.swing.JButton();
		removeHidePropertyBtn = new javax.swing.JButton();
		hidePropertiesJScrollPane = new javax.swing.JScrollPane();
		hidePropertiesList = new cz.muni.fi.fresneleditor.gui.mod.lens.components.PropertyVisibilityJList();
		showPropertiesJPanel = new javax.swing.JPanel();
		addShowPropertyBtn = new javax.swing.JButton();
		editShowPropertyBtn = new javax.swing.JButton();
		removeShowPropertyBtn = new javax.swing.JButton();
		showPropertiesJScrollPane = new javax.swing.JScrollPane();
		showPropertiesList = new cz.muni.fi.fresneleditor.gui.mod.lens.components.PropertyVisibilityJList();
		showPropertyUpBtn = new javax.swing.JButton();
		showPropertyDownBtn = new javax.swing.JButton();
		lensNameTextField = new javax.swing.JTextField();
		saveBtn = new javax.swing.JButton();
		deleteBtn = new javax.swing.JButton();
		reloadBtn = new javax.swing.JButton();
		closeBtn = new javax.swing.JButton();
		previewBtn = new javax.swing.JButton();

		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
				.getInstance().getContext().getResourceMap(LensJPanel.class);
		lensNameLbl.setText(resourceMap.getString("lensNameLbl.text")); // NOI18N
		lensNameLbl.setName("lensNameLbl"); // NOI18N

		domainJPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(resourceMap
						.getString("domainJPanel.border.title"))); // NOI18N
		domainJPanel.setName("domainJPanel"); // NOI18N

		selectorDomainLbl.setText(resourceMap
				.getString("selectorDomainLbl.text")); // NOI18N
		selectorDomainLbl.setName("selectorDomainLbl"); // NOI18N

		selectorTypeLbl.setText(resourceMap.getString("selectorTypeLbl.text")); // NOI18N
		selectorTypeLbl.setName("selectorTypeLbl"); // NOI18N

		selectorValueLbl
				.setText(resourceMap.getString("selectorValueLbl.text")); // NOI18N
		selectorValueLbl.setName("selectorValueLbl"); // NOI18N

		selectorDomainValueLbl.setFont(resourceMap
				.getFont("selectorDomainValueLbl.font")); // NOI18N
		selectorDomainValueLbl.setText(resourceMap
				.getString("selectorDomainValueLbl.text")); // NOI18N
		selectorDomainValueLbl.setName("selectorDomainValueLbl"); // NOI18N

		selectorTypeValueLbl.setText(resourceMap
				.getString("selectorTypeValueLbl.text")); // NOI18N
		selectorTypeValueLbl.setName("selectorTypeValueLbl"); // NOI18N

		selectorValueValueLbl.setText(resourceMap
				.getString("selectorValueValueLbl.text")); // NOI18N
		selectorValueValueLbl.setName("selectorValueValueLbl"); // NOI18N

		editSelectorBtn.setFont(resourceMap.getFont("editSelectorBtn.font")); // NOI18N
		editSelectorBtn.setText(resourceMap.getString("editSelectorBtn.text")); // NOI18N
		editSelectorBtn.setName("editSelectorBtn"); // NOI18N
		editSelectorBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				editSelectorBtnActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout domainJPanelLayout = new javax.swing.GroupLayout(
				domainJPanel);
		domainJPanel.setLayout(domainJPanelLayout);
		domainJPanelLayout
				.setHorizontalGroup(domainJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								domainJPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												domainJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																selectorDomainLbl)
														.addComponent(
																selectorTypeLbl)
														.addComponent(
																selectorValueLbl))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												domainJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																selectorDomainValueLbl,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																494,
																Short.MAX_VALUE)
														.addComponent(
																selectorTypeValueLbl,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																494,
																Short.MAX_VALUE)
														.addComponent(
																selectorValueValueLbl,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																494,
																Short.MAX_VALUE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												editSelectorBtn,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												72,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));
		domainJPanelLayout
				.setVerticalGroup(domainJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								domainJPanelLayout
										.createSequentialGroup()
										.addGroup(
												domainJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																selectorDomainLbl)
														.addComponent(
																selectorDomainValueLbl))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												domainJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																selectorTypeLbl)
														.addComponent(
																selectorTypeValueLbl))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												domainJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																selectorValueLbl)
														.addComponent(
																selectorValueValueLbl)))
						.addGroup(
								domainJPanelLayout.createSequentialGroup()
										.addContainerGap(31, Short.MAX_VALUE)
										.addComponent(editSelectorBtn)));

		commentJPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(resourceMap
						.getString("commentJPanel.border.title"))); // NOI18N
		commentJPanel.setName("commentJPanel"); // NOI18N

		commentJScrollPane.setName("commentJScrollPane"); // NOI18N

		commentTextArea.setColumns(20);
		commentTextArea.setFont(resourceMap.getFont("commentTextArea.font")); // NOI18N
		commentTextArea.setLineWrap(true);
		commentTextArea.setRows(5);
		commentTextArea.setName("commentTextArea"); // NOI18N
		commentJScrollPane.setViewportView(commentTextArea);

		javax.swing.GroupLayout commentJPanelLayout = new javax.swing.GroupLayout(
				commentJPanel);
		commentJPanel.setLayout(commentJPanelLayout);
		commentJPanelLayout
				.setHorizontalGroup(commentJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								commentJPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												commentJScrollPane,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												316, Short.MAX_VALUE)
										.addContainerGap()));
		commentJPanelLayout
				.setVerticalGroup(commentJPanelLayout.createParallelGroup(
						javax.swing.GroupLayout.Alignment.LEADING).addGroup(
						commentJPanelLayout
								.createSequentialGroup()
								.addComponent(commentJScrollPane,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										75, Short.MAX_VALUE).addContainerGap()));

		purposeJPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(resourceMap
						.getString("purposeJPanel.border.title"))); // NOI18N
		purposeJPanel.setName("purposeJPanel"); // NOI18N

		lensPurposeCombo.setName("lensPurposeCombo"); // NOI18N

		javax.swing.GroupLayout purposeJPanelLayout = new javax.swing.GroupLayout(
				purposeJPanel);
		purposeJPanel.setLayout(purposeJPanelLayout);
		purposeJPanelLayout
				.setHorizontalGroup(purposeJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								purposeJPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												lensPurposeCombo,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												316, Short.MAX_VALUE)
										.addContainerGap()));
		purposeJPanelLayout.setVerticalGroup(purposeJPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						purposeJPanelLayout
								.createSequentialGroup()
								.addComponent(lensPurposeCombo,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		groupsJPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(resourceMap
						.getString("groupsJPanel.border.title"))); // NOI18N
		groupsJPanel.setName("groupsJPanel"); // NOI18N

		groupsJScrollPane.setName("groupsJScrollPane"); // NOI18N

		associatedGroupsList.setName("associatedGroupsList"); // NOI18N
		associatedGroupsList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						associatedGroupsListValueChanged(evt);
					}
				});
		groupsJScrollPane.setViewportView(associatedGroupsList);

		javax.swing.GroupLayout groupsJPanelLayout = new javax.swing.GroupLayout(
				groupsJPanel);
		groupsJPanel.setLayout(groupsJPanelLayout);
		groupsJPanelLayout
				.setHorizontalGroup(groupsJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								groupsJPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												groupsJScrollPane,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												298, Short.MAX_VALUE)
										.addContainerGap()));
		groupsJPanelLayout
				.setVerticalGroup(groupsJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								groupsJPanelLayout
										.createSequentialGroup()
										.addComponent(
												groupsJScrollPane,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												143, Short.MAX_VALUE)
										.addContainerGap()));

		hidePropertiesJPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(resourceMap
						.getString("hidePropertiesJPanel.border.title"))); // NOI18N
		hidePropertiesJPanel.setName("hidePropertiesJPanel"); // NOI18N

		addHidePropertyBtn.setText(resourceMap
				.getString("addHidePropertyBtn.text")); // NOI18N
		addHidePropertyBtn.setName("addHidePropertyBtn"); // NOI18N
		addHidePropertyBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						addHidePropertyBtnActionPerformed(evt);
					}
				});

		removeHidePropertyBtn.setText(resourceMap
				.getString("removeHidePropertyBtn.text")); // NOI18N
		removeHidePropertyBtn.setEnabled(false);
		removeHidePropertyBtn.setName("removeHidePropertyBtn"); // NOI18N
		removeHidePropertyBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						removeHidePropertyBtnActionPerformed(evt);
					}
				});

		hidePropertiesJScrollPane.setName("hidePropertiesJScrollPane"); // NOI18N

		hidePropertiesList.setName("hidePropertiesList"); // NOI18N
		hidePropertiesList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						hidePropertiesListValueChanged(evt);
					}
				});
		hidePropertiesJScrollPane.setViewportView(hidePropertiesList);

		javax.swing.GroupLayout hidePropertiesJPanelLayout = new javax.swing.GroupLayout(
				hidePropertiesJPanel);
		hidePropertiesJPanel.setLayout(hidePropertiesJPanelLayout);
		hidePropertiesJPanelLayout
				.setHorizontalGroup(hidePropertiesJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								hidePropertiesJPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												hidePropertiesJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																hidePropertiesJPanelLayout
																		.createSequentialGroup()
																		.addComponent(
																				addHidePropertyBtn)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				removeHidePropertyBtn))
														.addComponent(
																hidePropertiesJScrollPane,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																298,
																Short.MAX_VALUE))
										.addContainerGap()));

		hidePropertiesJPanelLayout.linkSize(
				javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { addHidePropertyBtn,
						removeHidePropertyBtn });

		hidePropertiesJPanelLayout
				.setVerticalGroup(hidePropertiesJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								hidePropertiesJPanelLayout
										.createSequentialGroup()
										.addGroup(
												hidePropertiesJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																addHidePropertyBtn)
														.addComponent(
																removeHidePropertyBtn))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												hidePropertiesJScrollPane,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												231, Short.MAX_VALUE)
										.addContainerGap()));

		showPropertiesJPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(resourceMap
						.getString("showPropertiesJPanel.border.title"))); // NOI18N
		showPropertiesJPanel.setName("showPropertiesJPanel"); // NOI18N

		addShowPropertyBtn.setText(resourceMap
				.getString("addShowPropertyBtn.text")); // NOI18N
		addShowPropertyBtn.setName("addShowPropertyBtn"); // NOI18N
		addShowPropertyBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						addShowPropertyBtnActionPerformed(evt);
					}
				});

		editShowPropertyBtn.setFont(resourceMap
				.getFont("editShowPropertyBtn.font")); // NOI18N
		editShowPropertyBtn.setText(resourceMap
				.getString("editShowPropertyBtn.text")); // NOI18N
		editShowPropertyBtn.setEnabled(false);
		editShowPropertyBtn.setName("editShowPropertyBtn"); // NOI18N
		editShowPropertyBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						editShowPropertyBtnActionPerformed(evt);
					}
				});

		removeShowPropertyBtn.setText(resourceMap
				.getString("removeShowPropertyBtn.text")); // NOI18N
		removeShowPropertyBtn.setEnabled(false);
		removeShowPropertyBtn.setName("removeShowPropertyBtn"); // NOI18N
		removeShowPropertyBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						removeShowPropertyBtnActionPerformed(evt);
					}
				});

		showPropertiesJScrollPane.setName("showPropertiesJScrollPane"); // NOI18N

		showPropertiesList.setName("showPropertiesList"); // NOI18N
		showPropertiesList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						showPropertiesListValueChanged(evt);
					}
				});
		showPropertiesJScrollPane.setViewportView(showPropertiesList);

		showPropertyUpBtn
				.setIcon(resourceMap.getIcon("showPropertyUpBtn.icon")); // NOI18N
		showPropertyUpBtn.setText(resourceMap
				.getString("showPropertyUpBtn.text")); // NOI18N
		showPropertyUpBtn.setName("showPropertyUpBtn"); // NOI18N
		showPropertyUpBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						showPropertyUpBtnActionPerformed(evt);
					}
				});

		showPropertyDownBtn.setIcon(resourceMap
				.getIcon("showPropertyDownBtn.icon")); // NOI18N
		showPropertyDownBtn.setText(resourceMap
				.getString("showPropertyDownBtn.text")); // NOI18N
		showPropertyDownBtn.setName("showPropertyDownBtn"); // NOI18N
		showPropertyDownBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						showPropertyDownBtnActionPerformed(evt);
					}
				});

		javax.swing.GroupLayout showPropertiesJPanelLayout = new javax.swing.GroupLayout(
				showPropertiesJPanel);
		showPropertiesJPanel.setLayout(showPropertiesJPanelLayout);
		showPropertiesJPanelLayout
				.setHorizontalGroup(showPropertiesJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								showPropertiesJPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												showPropertiesJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																showPropertiesJPanelLayout
																		.createSequentialGroup()
																		.addComponent(
																				showPropertiesJScrollPane,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				281,
																				Short.MAX_VALUE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addGroup(
																				showPropertiesJPanelLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								showPropertyUpBtn,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								25,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								showPropertyDownBtn,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								25,
																								javax.swing.GroupLayout.PREFERRED_SIZE)))
														.addGroup(
																showPropertiesJPanelLayout
																		.createSequentialGroup()
																		.addComponent(
																				addShowPropertyBtn)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				removeShowPropertyBtn)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				editShowPropertyBtn)))
										.addContainerGap()));

		showPropertiesJPanelLayout.linkSize(
				javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { addShowPropertyBtn,
						editShowPropertyBtn, removeShowPropertyBtn });

		showPropertiesJPanelLayout
				.setVerticalGroup(showPropertiesJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								showPropertiesJPanelLayout
										.createSequentialGroup()
										.addGroup(
												showPropertiesJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																showPropertiesJPanelLayout
																		.createSequentialGroup()
																		.addGroup(
																				showPropertiesJPanelLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								addShowPropertyBtn)
																						.addComponent(
																								removeShowPropertyBtn)
																						.addComponent(
																								editShowPropertyBtn))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				showPropertiesJScrollPane,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				231,
																				Short.MAX_VALUE))
														.addGroup(
																showPropertiesJPanelLayout
																		.createSequentialGroup()
																		.addGap(65,
																				65,
																				65)
																		.addComponent(
																				showPropertyUpBtn)
																		.addGap(37,
																				37,
																				37)
																		.addComponent(
																				showPropertyDownBtn)))
										.addContainerGap()));

		lensNameTextField.setText(resourceMap
				.getString("lensNameTextField.text")); // NOI18N
		lensNameTextField.setName("lensNameTextField"); // NOI18N

		saveBtn.setText(resourceMap.getString("saveBtn.text")); // NOI18N
		saveBtn.setName("saveBtn"); // NOI18N
		saveBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveBtnActionPerformed(evt);
			}
		});

		deleteBtn.setText(resourceMap.getString("deleteBtn.text")); // NOI18N
		deleteBtn.setName("deleteBtn"); // NOI18N
		deleteBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteBtnActionPerformed(evt);
			}
		});

		reloadBtn.setText(resourceMap.getString("reloadBtn.text")); // NOI18N
		reloadBtn
				.setToolTipText(resourceMap.getString("reloadBtn.toolTipText")); // NOI18N
		reloadBtn.setName("reloadBtn"); // NOI18N
		reloadBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				reloadBtnActionPerformed(evt);
			}
		});

		closeBtn.setText(resourceMap.getString("closeBtn.text")); // NOI18N
		closeBtn.setName("closeBtn"); // NOI18N
		closeBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				closeBtnActionPerformed(evt);
			}
		});

		previewBtn.setText(resourceMap.getString("previewBtn.text")); // NOI18N
		previewBtn.setToolTipText(resourceMap
				.getString("previewBtn.toolTipText")); // NOI18N
		previewBtn.setName("previewBtn"); // NOI18N
		previewBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				previewBtnActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING)
																				.addGroup(
																						javax.swing.GroupLayout.Alignment.LEADING,
																						layout.createSequentialGroup()
																								.addComponent(
																										lensNameLbl,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										79,
																										javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(
																										lensNameTextField,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										245,
																										javax.swing.GroupLayout.PREFERRED_SIZE))
																				.addGroup(
																						javax.swing.GroupLayout.Alignment.LEADING,
																						layout.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING,
																								false)
																								.addComponent(
																										domainJPanel,
																										javax.swing.GroupLayout.Alignment.LEADING,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										Short.MAX_VALUE)
																								.addGroup(
																										javax.swing.GroupLayout.Alignment.LEADING,
																										layout.createSequentialGroup()
																												.addGroup(
																														layout.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.TRAILING)
																																.addComponent(
																																		showPropertiesJPanel,
																																		javax.swing.GroupLayout.DEFAULT_SIZE,
																																		javax.swing.GroupLayout.DEFAULT_SIZE,
																																		Short.MAX_VALUE)
																																.addGroup(
																																		layout.createParallelGroup(
																																				javax.swing.GroupLayout.Alignment.TRAILING,
																																				false)
																																				.addComponent(
																																						commentJPanel,
																																						javax.swing.GroupLayout.Alignment.LEADING,
																																						javax.swing.GroupLayout.DEFAULT_SIZE,
																																						javax.swing.GroupLayout.DEFAULT_SIZE,
																																						Short.MAX_VALUE)
																																				.addComponent(
																																						purposeJPanel,
																																						javax.swing.GroupLayout.Alignment.LEADING,
																																						javax.swing.GroupLayout.DEFAULT_SIZE,
																																						javax.swing.GroupLayout.DEFAULT_SIZE,
																																						Short.MAX_VALUE)))
																												.addPreferredGap(
																														javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																												.addGroup(
																														layout.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.LEADING,
																																false)
																																.addComponent(
																																		hidePropertiesJPanel,
																																		javax.swing.GroupLayout.PREFERRED_SIZE,
																																		javax.swing.GroupLayout.DEFAULT_SIZE,
																																		javax.swing.GroupLayout.PREFERRED_SIZE)
																																.addComponent(
																																		groupsJPanel,
																																		javax.swing.GroupLayout.PREFERRED_SIZE,
																																		javax.swing.GroupLayout.DEFAULT_SIZE,
																																		javax.swing.GroupLayout.PREFERRED_SIZE)))))
																.addContainerGap())
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		saveBtn)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		deleteBtn)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		closeBtn)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		reloadBtn)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(
																		previewBtn)
																.addGap(20, 20,
																		20)))));

		layout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { closeBtn, deleteBtn, reloadBtn,
						saveBtn });

		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(lensNameTextField)
												.addComponent(lensNameLbl))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(domainJPanel,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		purposeJPanel,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(
																		commentJPanel,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addComponent(
														groupsJPanel,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(
														showPropertiesJPanel,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														hidePropertiesJPanel,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(saveBtn)
												.addComponent(deleteBtn)
												.addComponent(closeBtn)
												.addComponent(reloadBtn)
												.addComponent(previewBtn))
								.addContainerGap()));
	}// </editor-fold>                        

	private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveBtnActionPerformed
		doSave();
	}// GEN-LAST:event_saveBtnActionPerformed

	private void editSelectorBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editSelectorBtnActionPerformed
		editSelectorButtonAP();
	}// GEN-LAST:event_editSelectorBtnActionPerformed

	private void associatedGroupsListValueChanged(
			javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_associatedGroupsListValueChanged
		// do nothing
	}// GEN-LAST:event_associatedGroupsListValueChanged

	private void showPropertiesListValueChanged(
			javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_showPropertiesListValueChanged
		showPropertiesListClicked();
	}// GEN-LAST:event_showPropertiesListValueChanged

	private void hidePropertiesListValueChanged(
			javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_hidePropertiesListValueChanged
		hidePropertiesListClicked();
	}// GEN-LAST:event_hidePropertiesListValueChanged

	private void addShowPropertyBtnActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addShowPropertyBtnActionPerformed
		addShowPropertyButtonClicked();
	}// GEN-LAST:event_addShowPropertyBtnActionPerformed

	private void editShowPropertyBtnActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editShowPropertyBtnActionPerformed
		editShowPropertyButtonClicked();
	}// GEN-LAST:event_editShowPropertyBtnActionPerformed

	private void removeShowPropertyBtnActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeShowPropertyBtnActionPerformed
		removeShowPropertyButtonClicked();
	}// GEN-LAST:event_removeShowPropertyBtnActionPerformed

	private void addHidePropertyBtnActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addHidePropertyBtnActionPerformed
		addHidePropertyButtonClicked();
	}// GEN-LAST:event_addHidePropertyBtnActionPerformed

	private void removeHidePropertyBtnActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeHidePropertyBtnActionPerformed
		removeHidePropertyButtonClicked();
	}// GEN-LAST:event_removeHidePropertyBtnActionPerformed

	private void showPropertyUpBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showPropertyUpBtnActionPerformed
		showPropertyUpButtonClicked();
	}// GEN-LAST:event_showPropertyUpBtnActionPerformed

	private void showPropertyDownBtnActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showPropertyDownBtnActionPerformed
		showPropertyDownButtonClicked();
	}// GEN-LAST:event_showPropertyDownBtnActionPerformed

	private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteBtnActionPerformed
		doDelete();
	}// GEN-LAST:event_deleteBtnActionPerformed

	private void reloadBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_reloadBtnActionPerformed
		doReload();
	}// GEN-LAST:event_reloadBtnActionPerformed

	private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeBtnActionPerformed
		closeButtonClicked();
	}// GEN-LAST:event_closeBtnActionPerformed

	private void previewBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_previewBtnActionPerformed
		// Export currently edited format to be displayed
		LensModelManager modelManager = new LensModelManager();
		Lens lens = modelManager.convertModel2JFresnel(saveModel());

		// Show preview dialog for setting preview parameters
		PreviewDialog previewDialog = new LensPreviewDialog(
				GuiUtils.getOwnerFrame(this), true, PreviewDialog.PREVIEW_LENS,
				lens, null);
		ResourceMap resourceMap = Application.getInstance().getContext()
				.getResourceMap(LensJPanel.class);
		previewDialog.setSelectLabelText(resourceMap
				.getString("previewPanelText"));
		GuiUtils.centerOnScreen(previewDialog);
		previewDialog.setVisible(true);
	}// GEN-LAST:event_previewBtnActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addHidePropertyBtn;
	private javax.swing.JButton addShowPropertyBtn;
	private cz.muni.fi.fresneleditor.common.guisupport.components.UrisJList associatedGroupsList;
	private javax.swing.JButton closeBtn;
	private javax.swing.JPanel commentJPanel;
	private javax.swing.JScrollPane commentJScrollPane;
	private javax.swing.JTextArea commentTextArea;
	private javax.swing.JButton deleteBtn;
	private javax.swing.JPanel domainJPanel;
	private javax.swing.JButton editSelectorBtn;
	private javax.swing.JButton editShowPropertyBtn;
	private javax.swing.JPanel groupsJPanel;
	private javax.swing.JScrollPane groupsJScrollPane;
	private javax.swing.JPanel hidePropertiesJPanel;
	private javax.swing.JScrollPane hidePropertiesJScrollPane;
	private cz.muni.fi.fresneleditor.gui.mod.lens.components.PropertyVisibilityJList hidePropertiesList;
	private javax.swing.JLabel lensNameLbl;
	private javax.swing.JTextField lensNameTextField;
	private javax.swing.JComboBox lensPurposeCombo;
	private javax.swing.JButton previewBtn;
	private javax.swing.JPanel purposeJPanel;
	private javax.swing.JButton reloadBtn;
	private javax.swing.JButton removeHidePropertyBtn;
	private javax.swing.JButton removeShowPropertyBtn;
	private javax.swing.JButton saveBtn;
	private javax.swing.JLabel selectorDomainLbl;
	private javax.swing.JLabel selectorDomainValueLbl;
	private javax.swing.JLabel selectorTypeLbl;
	private javax.swing.JLabel selectorTypeValueLbl;
	private javax.swing.JLabel selectorValueLbl;
	private javax.swing.JLabel selectorValueValueLbl;
	private javax.swing.JPanel showPropertiesJPanel;
	private javax.swing.JScrollPane showPropertiesJScrollPane;
	private cz.muni.fi.fresneleditor.gui.mod.lens.components.PropertyVisibilityJList showPropertiesList;
	private javax.swing.JButton showPropertyDownBtn;
	private javax.swing.JButton showPropertyUpBtn;

	// End of variables declaration//GEN-END:variables

	/**
	 * Stores values set in Lens JPanel into lens model instance.
	 * 
	 * @return lens model instance holding information about given format
	 */
	private LensModel saveModel() {
		LensModel model = new LensModel(lensNameTextField.getText());

		// lens selector
		model.setSelector(lensSelector);

		// lens purpose
		model.setPurpose(((PurposeDisplayFormat)lensPurposeCombo.getSelectedItem()).getPurposeType());

		// lens comment
		String comment = commentTextArea.getText();
		if (StringUtils.hasText(comment)) {
			model.setComment(comment);
		}

		// hide properties
		model.setHideProperties(hidePropertiesList.getElements());

		// show properties
		model.setShowProperties(showPropertiesList.getElements());

		// groups
		List<Group> associatedGroups = new ArrayList<Group>();
		for (URI uri : associatedGroupsList.getElements()) {
			associatedGroups.add(new Group(uri.stringValue(), ""));
		}
		model.setGroups(associatedGroups);

		return model;
	}

	private void showPropertiesListClicked() {
		boolean hasSelection = !showPropertiesList.isSelectionEmpty();
		removeShowPropertyBtn.setEnabled(hasSelection);
		editShowPropertyBtn.setEnabled(hasSelection);

		showPropertyDownBtn.setEnabled(hasSelection
				&& showPropertiesList.getSelectedIndex() < showPropertiesList
						.getElements().size() - 1);

		showPropertyUpBtn.setEnabled(hasSelection
				&& showPropertiesList.getSelectedIndex() > 0);
	}

	private void hidePropertiesListClicked() {
		boolean hasSelection = !hidePropertiesList.isSelectionEmpty();
		removeHidePropertyBtn.setEnabled(hasSelection);
	}

	private void editSelectorButtonAP() {
		final DomainSelectorDialog domainSelectorDialog = new DomainSelectorDialog(
				lensSelector, GuiUtils.getOwnerFrame(this), true);
		domainSelectorDialog.setSaveActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Take selector returned from domain selector dialog and
				// update the panels state based on it
				loadLensSelector(domainSelectorDialog.saveLensSelector());
			}
		});
		domainSelectorDialog.setVisible(true);
	}

	/**
	 * Updates the whole panel based on model.
	 * 
	 * @param actualLensModel
	 */
	private void loadModel(LensModel actualLensModel) {
		if (actualLensModel == null) {
			associatedGroupsList.setElements(new ArrayList<URI>());
			hidePropertiesList
					.setElements(new ArrayList<PropertyVisibilityWrapper>());
			showPropertiesList
					.setElements(new ArrayList<PropertyVisibilityWrapper>());
			lensPurposeCombo.setSelectedItem(new PurposeDisplayFormat(LensPurposeType.NOT_SPECIFIED));
			lensNameTextField.setText(null);
		} else {
			List<URI> groupUris = new ArrayList<URI>();
			for (Group tempGroup : actualLensModel.getGroups()) {
				groupUris.add(new URIImpl(tempGroup.getURI()));
			}
			associatedGroupsList.setElements(groupUris);
			hidePropertiesList.setElements(getCopyOfList(actualLensModel
					.getHideProperties()));
			showPropertiesList.setElements(getCopyOfList(actualLensModel
					.getShowProperties()));
			lensPurposeCombo.setSelectedItem(new PurposeDisplayFormat(actualLensModel.getPurpose()));
			lensNameTextField.setText(actualLensModel.getModelUri());
		}

		// comment
		String commentString = "";
		commentTextArea.setText(actualLensModel.getComment());

		// selector, domain
		LensSelector selector = actualLensModel != null ? actualLensModel
				.getSelector() : null;
		loadLensSelector(selector);
	}

	private List<PropertyVisibilityWrapper> getCopyOfList(
			List<PropertyVisibilityWrapper> originalList) {
		ArrayList<PropertyVisibilityWrapper> arrayList = new ArrayList<PropertyVisibilityWrapper>();
		for (PropertyVisibilityWrapper cloneable : originalList) {
			arrayList.add(cloneable.getCopy());
		}
		return arrayList;
	}

	private void removeShowPropertyButtonClicked() {
		PropertyVisibilityWrapper selectedValue = showPropertiesList
				.getSelectedValueCasted();
		if (selectedValue != null) {
			showPropertiesList.removeElement(selectedValue);
		}
	}

	private void loadLensSelector(LensSelector selector) {
		this.lensSelector = selector;
		if (selector != null) {
			selectorTypeValueLbl.setText(selector.getType().name());
			selectorValueValueLbl.setText(FresnelUtils.replaceNamespace(
					selector.asString(), ContextHolder.getInstance()
							.getDataRepositoryDao().getNamespaces()));
			selectorDomainValueLbl.setText(selector.getDomain().name());
		} else {
			selectorDomainValueLbl.setText(null);
			selectorTypeValueLbl.setText(null);
			selectorValueValueLbl.setText(null);
		}
	}

	private void addShowPropertyButtonClicked() {
		final EditShowPropertyJDialog editShowPropertyJDialog = new EditShowPropertyJDialog(
				lensSelector, getUsedShowProperties(), getUsedHideProperties(),
				GuiUtils.getOwnerFrame(this), true);
		editShowPropertyJDialog.setSaveActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String validationResult = editShowPropertyJDialog
						.validateInput();
				String propertyUri = editShowPropertyJDialog.getPropertyUri();
				if (validationResult == null && isUsed(propertyUri)) {
					validationResult = "The property '"
							+ propertyUri
							+ "' is already used in one of show/hide properties list.";
				}
				if (validationResult == null) {
					PropertyVisibilityWrapper visibility = editShowPropertyJDialog
							.savePropertyVisibility();
					showPropertiesList.addElement(visibility);
					editShowPropertyJDialog.dispose();
				} else {
					new MessageDialog(GuiUtils.getOwnerFrame(LensJPanel.this),
							"Cannot save changes", validationResult)
							.setVisible(true);
				}

			}
		});
		editShowPropertyJDialog.setVisible(true);
	}

	private void editShowPropertyButtonClicked() {
		PropertyVisibilityWrapper propVisibility = showPropertiesList
				.getSelectedValueCasted();
		if (propVisibility != null) {
			final String originalPropertyUri = propVisibility
					.getFresnelPropertyValueURI();
			final EditShowPropertyJDialog editShowPropertyJDialog = new EditShowPropertyJDialog(
					lensSelector, propVisibility, getUsedShowProperties(),
					getUsedHideProperties(), GuiUtils.getOwnerFrame(this), true);
			editShowPropertyJDialog.setSaveActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					String propertyUri = editShowPropertyJDialog
							.getPropertyUri();

					String validationResult = editShowPropertyJDialog
							.validateInput();
					if (validationResult == null
							&& !originalPropertyUri.equals(propertyUri)
							&& isUsed(propertyUri)) {
						validationResult = "The property '"
								+ propertyUri
								+ "' is already used in one of show/hide properties list.";
					}
					if (validationResult == null) {
						editShowPropertyJDialog.savePropertyVisibility();
						editShowPropertyJDialog.dispose();
						// showPropertiesList.repaint() does not update the GUI
						// correctly
						// in case when setting complex property description
						List<PropertyVisibilityWrapper> elements = showPropertiesList
								.getElements();
						showPropertiesList.setElements(elements);
					} else {
						new MessageDialog(GuiUtils
								.getOwnerFrame(LensJPanel.this),
								"Cannot save changes", validationResult)
								.setVisible(true);
					}
				}
			});
			editShowPropertyJDialog.setVisible(true);
		}
	}

	/**
	 * Returns true if the given property is already used.
	 * 
	 * @param propertyUri
	 * @return true if the given property is already used
	 */
	private boolean isUsed(String propertyUri) {
		return SelectLensPropertyJPanel.isElementIn(getUsedHideProperties(),
				propertyUri)
				|| SelectLensPropertyJPanel.isElementIn(
						getUsedShowProperties(), propertyUri);
	}

	private void addHidePropertyButtonClicked() {
		final AddHidePropertyDialog addHidePropertyDialog = new AddHidePropertyDialog(
				lensSelector, getUsedShowProperties(), getUsedHideProperties(),
				GuiUtils.getOwnerFrame(this), true);
		addHidePropertyDialog.setOkActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String propertyUri = addHidePropertyDialog.savePropertyURI();
				String validationResult = addHidePropertyDialog.validateInput();

				if (validationResult == null && isUsed(propertyUri)) {
					validationResult = "The property '"
							+ propertyUri
							+ "' is already used in one of show/hide properties list.";
				}
				if (validationResult == null) {
					PropertyVisibilityWrapper wrapper = new PropertyVisibilityWrapper();
					wrapper.setFresnelPropertyValueURI(propertyUri);
					hidePropertiesList.addElement(wrapper);
					addHidePropertyDialog.dispose();
				} else {
					new MessageDialog(GuiUtils.getOwnerFrame(LensJPanel.this),
							"Cannot save changes", validationResult)
							.setVisible(true);
				}
			}
		});
		addHidePropertyDialog.setVisible(true);
	}

	private void removeHidePropertyButtonClicked() {
		if (!hidePropertiesList.isSelectionEmpty()) {
			hidePropertiesList.removeElement(hidePropertiesList
					.getSelectedValueCasted());
		}
	}

	@Override
	public Lens getItem() {
		return lens;
	}

	@Override
	public String getLabel() {
		return lensItemNode.toString();
	}

	@Override
	public JScrollPane getScrollPane() {
		if (representingScrollPane == null) {
			representingScrollPane = new LensJScrollPane(this);
		}
		return representingScrollPane;
	}

	/**
	 * Refreshes to initial state.
	 */
	public void doReload() {
		loadModel(initialLensModel);
	}

	@Override
	public void doDelete() {
		new MessageDialog(GuiUtils.getOwnerFrame(this), "Confirmation",
				"Do you really want to delete the lens '"
						+ initialLensModel.getModelUri() + "'?",
				new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						ContextHolder.getInstance().getFresnelDocumentDao().deleteLens(lens.getURI());
						// fixme igor: remove the node and the tab if deleting
						// was succesfull
						AppEventsManager.getInstance()
								.fireRepositoryDataChanged(
										this,
										ContextHolder.getInstance()
												.getFresnelRepositoryName());
					}
				}).setVisible(true);
	}

	@Override
	public void doSave() {
		if (validateForm()) {
			LensModel newModel = saveModel();

			// fixme igor: update the initial model with the new model if the
			// save action is succesfull
			// probably best way would be to close/reopen the node/tab again..

			if (initialLensModel == null
					|| !newModel.getModelUri().equals(
							initialLensModel.getModelUri())) {
				lensItemNode.setUserObject(new URIImpl(newModel.getModelUri()));
			}

			LensModelManager modelManager = new LensModelManager();
                        
			if (createNew) {
				ContextHolder.getInstance().getFresnelDocumentDao().getLenses().add(modelManager.convertModel2JFresnel(newModel));
			} else {
				ContextHolder.getInstance().getFresnelDocumentDao().updateLens(lens.getURI(), modelManager.convertModel2JFresnel(newModel));
			}
			AppEventsManager.getInstance().fireRepositoryDataChanged(this,
					ContextHolder.getInstance().getFresnelRepositoryName());
		}
	}

	private boolean validateForm() {
            // TODO: 
		String lensName = lensNameTextField.getText();
		String validateMessage = null;
//                        FresnelUtils.validateResourceUri(lensName,
//				ContextHolder.getInstance().getFresnelRepositoryDao());
		if (validateMessage != null) {
			new MessageDialog(GuiUtils.getOwnerFrame(this), "Invalid lens URI",
					"The lens URI '" + lensName + "' is not valid:<br>"
							+ validateMessage).setVisible(true);
		}
		return validateMessage == null;
	}

	private class LensJScrollPane extends JScrollPane implements IContextMenu {

		public LensJScrollPane(LensJPanel lensJPanel) {
			super(lensJPanel);
		}

		@Override
		public List<JMenuItem> getMenu() {
			return lensItemNode != null ? lensItemNode.getMenu() : Collections
					.<JMenuItem> emptyList();
		}
	}

	private List<String> getUsedShowProperties() {
		return Lists.transform(showPropertiesList.getElements(),
				propVisibility2string);
	}

	private List<String> getUsedHideProperties() {
		return Lists.transform(hidePropertiesList.getElements(),
				propVisibility2string);
	}

	private static final Function<PropertyVisibilityWrapper, String> propVisibility2string = new Function<PropertyVisibilityWrapper, String>() {
		@Override
		public String apply(PropertyVisibilityWrapper from) {
			return from.getFresnelPropertyValueURI();
		}
	};

	private void showPropertyDownButtonClicked() {
		moveSelectedElement(showPropertiesList, false);
	}

	private void showPropertyUpButtonClicked() {
		moveSelectedElement(showPropertiesList, true);
	}

	private void moveSelectedElement(JList list, boolean moveUp) {
		int index = list.getSelectedIndex();
		if ((moveUp && index >= 1)
				|| (!moveUp && (index + 1) < list.getModel().getSize())) {
			int targetIndex = index + (moveUp ? -1 : 1);
			// we do no do anything for first item or if anything is selected
			Object selected = list.getModel().getElementAt(index);
			((DefaultListModel) list.getModel()).removeElementAt(index);
			((DefaultListModel) list.getModel()).add(targetIndex, selected);

			// refresh the selection
			list.setSelectedIndex(targetIndex);
		}
	}

	private void closeButtonClicked() {
		lensItemNode.closeTab();
	}

}
